 Témata ke zkoušce z předmětu počítačová grafika II
1. Co je to objektový a obrazový prostor. Vysvětli pojmy: počítačová vizualizace, 
počítačové vidění, počítačová geometrie, zpracování obrazu. 
Scéna = množina prostorových objektů doplněná o další informace potřebné k zobrazení 
(zobrazované objekty - geometrie, transformace tvaru materiál, umístění, charakteristika kamery, 
popis osvětlení scény), tělesa – vertex (geometrie) a index (topilogie) buffer 
Objektový prostor: Virtuální prostor s definovanými grafickými objekty ve zvolené grafické 
reprezentaci. Obecně N rozměrný, vektorový i rastrový, možnost editace objektů ve scéně. 
Obrazový prostor: Prostor, v kterém jsou grafické struktury zobrazovány. Většinou dvourozměrný, 
převážně rastrový, ale i vektorový. 
Počítačová vizualizace (grafika): Transformuje data z objektového do obrazového prostru. 
Operace: promítání, rasterizace, stínování, výpočet viditelnosti, osvětlení a stínů, …Složitost 
transformací záleží na vnitřních reprezentacích jednotlivých prostorů. Požadavky na rychlost a 
realistický vjem. 
Počítačová geometrie: Transformaci geometrických objektů v rámci objektového prostoru. 
Operace: transformace (otáčení, posunutí, zvětšení), deformace, vyšetřování kolizí, množinové 
operace, …Použití: CAD - design ve stavebnictví, strojírenství, DTP (sázecí programy pro desktop 
publishing, např. TeX). 
Zpracování obrazu: Zpracování dat na úrovni obrazu bez znalosti jaké objekty jsou zobrazeny. 
Operace: transformace, filtrace, komprese, úpravy barev, …Použití: úprava fotografie, přenos a 
archivace statického i pohyblivého obrazu 
Počítačové vidění: Obor zabývající se identifikováním objektů z informací obsažených v obraze. 
Vyhledávání objektů známého tvaru umístěných v objektové databázi. Operace: segmentace, 
klasifikace, rozpoznávání, … 
2. Vektorová a rastrová reprezentace. Výhody a nevýhody, použití, příklady formátů 
Vektorová reprezentace: reprezentace pomocí spojitých matematických funkcí a vektorů 
(definice objektů pomocí elementárních grafických primitiv a jejich atributů (body, úsečky, plochy, 
…)) 
výhody: přesné určení polohy (číselně, funkcí), snadné definování matematicky popsatelných 
grafických objektů, možnost provádění přesných geometrických transformací, deformací, … 
nevýhody: složité geometrické tvary těžko popsatelné - plátování, obtížná reprezentace reálné 
scény, definování tvaru ne vnitřní struktury. 
Formáty: *.dxf, *.dwg, *.wmf … pro běžné geometrické objekty menší paměťová i časová 
náročnost 
Použití: CAD (objektový prostor) – projektování, navrhování plošných výkresů (strojírenství, 
architektura, elektrotechnika…) 
Rastrová reprezentace: reprezentace pomocí diskrétní mřížky, obraz je vzorkovaný (definování 
scény pomocí úplného výčtu hodnot v jednotlivých intervalech (elementech)). 
Elementy (typy mřížek): 2D – pixel (čtverec, trojúhelník, mnohoúhelník), 3D – voxel 
výhody: snadná aplikace na současné snímače a display, jednoduchá definice libovolně složitých 
objektů, definice nejen tvaru, ale i vnitřní struktury objektu (řezy, průhledy). 
nevýhody: problémy při provádění geometrických transformací (otočení, zvětšení) – nespojitost, 
moiré, alias, větší paměťová náročnost dat a časová složitost algoritmů, problémy při výpočtu 
geometrických charakteristik objektů (normály, tečny). 
Formáty: *.gif, *.tiff, *.bmp, *.jpeg, *.png 
Použití: obrázky, fotografie 3. Co je zobrazovací řetězec. Jak dělíme algoritmy viditelnosti? Uveďte příklady 
Zobrazovací řetězec: soubor činností postupně zpracovávající model v objektovém prostoru a 
vytvářející odpovídající obraz v obrazovém prostoru. (visualization pipeline) 
… počítačová vizualizace (objektový prostor  obrazový prostor) 
grafická scéna scéna obsahující grafické objekty s nastavenými 
parametry 
orientace scény natočení scény podle nastavení kamery - 
pohledová transformace 
ořezání pohledovým objemem ořezání (odstranění) objektů nebo jejich částí, 
podle nastaveného pohledového objemu 
promítání promítání scény podle zvoleného typu projekce 
transformace do okna obrazovky nastavení skutečného výřezu scény, který bude 
zobrazován na výstupním zařízení 
učení viditelnosti vybrání viditelných zobrazovaných objektů 
scény nebo jejich částí 
rasterizace rozklad objektů na elementy (pixely), sloužící 
pro vykreslení na výstupním zařízení 
výpočet osvětlení určení skutečné vykreslené intenzity a barvy 
jednotlivých elementů (pixelů) podle osvětlení 
scény a povrchu zobrazovaných objektů mapování textur 
rastrový obraz 
rastrový obraz zobrazený na výstupním zařízení 
(matice pixelů s daným rozlišením a barevnou 
hloubkou) 
Algoritmy viditelnosti: Cílem je nalezení těch objektů a jejich částí, které jsou viditelné 
z určitého místa (místa kamery). Jednotlivé algoritmy jsou obvykle svázány s konkrétní 
reprezentací prostorových těles. 
Objektově orientované algoritmy: porovnávání vzájemné polohy těles a jejich částí 
(plochy, hrany), složitost úměrná n2
, kde n = počet objektů ve scéně. (např. Malířův) 
Obrazově orientované algoritmy: testy pro každý pixel obrazovky, která část promítnutého 
tělesa je nejblíže pozorovateli tj. viditelná, složitost n.p, kde p je počet pixelů rastru. (z-buffer)
Algoritmy viditelnosti lze také dělit na: 
Rastrové: výsledkem je rastrový obraz 
Liniové: výsledek je soubor viditelných hran 
Předzpracování: často využívané při řešení viditelnosti. Označení stěn na přivrácené a odvrácené. 
(výpočet normály jako součin dvou vektorů v rovině stěny, podle výsledku skalárního součinu 
normály plochy a pohledového vektoru: < 0 – přivrácená stěna, nebo > 0 – odvrácená stěna). Je 
nutná analýza scény, obecnost vede ke složitosti. 
Algoritmy: z-buffer, malířův algoritmus, dělení obrazovky (Warnock subdivision), řádkový rozklad
(Watkinsův algoritmus, podobnost s algoritmem vyplňování, nedochází k překreslování pixelů, 
odstranění odvrácených ploch, rozložení na hrany, odstranění vodorovných hran, setřídění hran, 
vztvoření seznamu hran pro daný řádek y, pro každou hranu určíme stěnu), ray casting, ray
tracing, plovoucí horizont (plocha funkce dvou proměnných – zobrazení pomocí řezů, vykreslení 
každého dalšího řezu, jen pokud je nad nebo pod ji zaplněnou oblastí na obrazovce, pro rostoucí 
v určuje průřezovou křivku u, 2 pomocná pole – horní a dolní horizont, počet prvků polí shodný 
s velikostí obrazu, pro každou souřadnici x obsahují nevyšší/nejnižší souřadnici y, při kreslení řezu 
porovnávání s oběma poli). 4. Algoritmus viditelnosti - paměť hloubky. Popište princip. Problematika perspektivně 
korektní interpolace. 
Rastrový, obrazově orientovaný algoritmus. Angl. název je depth-buffer či z-buffer. Základem je 
dvourozměrné pole, které má velikost jako výsledný obraz. Na jednotlivých souřadnicích pole jsou 
pak z souřadnice toho bodu, který leží nejblíže k pozorovateli a jehož průmět leží v odpovídajícím 
pixelu rastru. S pamětí hloubky se také vytváří pole o stejných rozměrech, které se označuje jako 
image buffer neboli také obrazové plátno, na které vykreslujeme objekt. 
Algoritmus: 
1. vyplň image buffer barvou pozadí 
2. vyplň z-buffer hodnotou -∞ (-1), resp. +1 pokud se dívám z [0, 0, 0] ve směru osy z (0, 1) 
3. každou plochu rozlož na pixely a pro každý pixel [xi, yi] stanov zi
4. je-li zi větší (menší) než položka [xi, yi] v paměti hloubky pak 
a. obarvi pixel [xi, yi] v obrazové paměti barvou dané plochy 
b. položku [xi, yi] v paměti hloubky aktualizuj hodnotou zi
Výhody: jednoduchost, není nutné třídění, hardwarová implementace, řešení překrývajících se i 
protínajících se ploch, řešení i nerovinných ploch. 
Nevýhody: vykreslování i neviditelných pixelů, velká paměťová náročnost řešení pomocí kreslení v 
řádcích nebo v pásech. 
Modifikace: částečné uspořádání (back-to-front, front-to-back)
… transformace (pozice, pohledu, přidání homogenní souřadnice, zobrazovacího objemu – od 
jednotkového), ořezání homogenní souřadnice (triangulace, ořezání podle z souřadnice, která je po 
transformaci v homogenní souřadnici w, varianty ořezání trojúhelníka), dehomogenizace, ořezání 
zobrazovacím objemem (ta strašně dlouhá podmínka, jestli se vejde do jednotkového objemu), 
transformace do okna (otočení, posun na střed, roztažení na velikost okna), rasterizace (pomocí 
lineární interpolace), porovnání se z-bufferem (pokud je z souřadnice menší, přepíšu z-buffer a 
image buffer) 
Lineární interpolace: 
K rasterizaci polygonu se často používá lineární interpolace, jelikož se současně s rasterizací i 
mapují textury (také pomocí lineární interpolace). Nejdříve dojde 
k rozdělení polygonu, podle y souřadnice. Následně jsou setříděny 
body podle y na Ay<By<Cy. 
Interpolujeme nejdříve x a z podle y (procházíme všechny řádky 
polygonu a dopočítáváme k nim x-ové a z-ové souřadnice) a dále 
z podle x (známe krajní hodnoty z0 a z1 pro daný řádek a procházíme 
ho podle x a k němu dopočítáváme z). Vypočtené hodnoty [x,y,z] 
použijeme v algoritmu paměti hloubky. 
Určení polohy mezi 2 body, dopočítání druhé souřadnice na základě znalosti první. 
Perspektivní korekce: 
Při paralelní projekci (perspektivní, vpravo) JE (na rozdíl od ortogonální - rovnoběžná (vlevo)) 
rozdíl mezi poměry délky řádku probíraného polygonu v objektovém a obrazovém prostoru. Z toho 
důvodu dochází v paralelní projekci k zlomům na hranách polygonů. Tomu se předchází interpolací 
souřadnic vydělených w, w také interpoluji, před vykreslením souřadnice zase vynásobím 
interpolovaným I. 5. Algoritmy viditelnosti - Malířův a Warnockův algoritmus. Popište principy. 
Malířův algoritmus: objektově orientovaný algoritmus. Princip překreslování vzdálenějších ploch 
plochami v prostředí (jako malíř na plátno). Nutností je správné pořadí při vykreslování. 
Algoritmus: 
1. setřídění podle z souřadnice (sestupně podle maximální z souřadnice, tj. odzadu dopředu) 
2. kontrola správnosti setřídění a odstranění nejasnosti v pořadí (provádění testů a výměna 
ploch v seznamu) 
a. první plocha P seznamu se kontroluje 
s následujícími plochami Q 
b. test je splněn, je-li: 
i. z1min < z2max – plochy se 
nepřekrývají je možnost je 
ihned vykreslit 
ii. průměty ploch se nezakrývají 
v průmětně 
iii. P leží v poloprostoru určeném 
Q a odvráceném od 
pozorovatele 
iv. Q leží v poloprostoru určeném 
P a přivráceném k pozorovateli 
3. zobrazení podle setříděného seznamu 
Není-li žádný test splněn, nutno změnit pořadí ploch. 
Nevýhody: nelze použít na protínající se plochy, možnost zacyklení algoritmu (vzájemně se 
překrývající plochy). 
 
Warnockův algoritmus (dělení obrazovky): rastrový algoritmus, rekurzivní. Scéna je složena 
z rovinných ploch. Vychází z předpokladu, že složitější problém lze rozdělit na řadu menších 
(snazších). Tento princip se nazývá rozděl a panuj (divide and conquer). 
Algoritmus: 
1. Lze jednoduše určit, jak má být vyplněno obdélníkové okno na obrazovce? 
a. Ano – vyplní 
b. Ne – rozděl okno dvěma podélnými řezy v polovině na 4 díly a rekurzivně opakuj 
Při vyplňování okna mohou nastat tyto možnosti: 
1. Pokud do okna nezasahuje žádný objekt, zůstává vyplněné barvou pozadí 
2. Do okna zasahuje právě jedna plocha. Pak bude tato plocha uvnitř okna vyplněna, zbytek 
okna získá barvu pozadí. 
3. Do okna zasahuje více ploch, ale plocha nejblíže k pozorovateli je zcela překrývá (testy 
v rozích okna). Proto je okno vyplněno barvou této plochy. 
4. Okno obsahuje komplikovanější část scény. Je dále rozděleno. 
V případě potřeby možno dělit až na úroveň pixelů. 
Optimalizace: Adaptivní dělení mřížky (nepravidelná mřížka, místo dělení je vrchol stěny), 
vytváření seznamu stěn pro každé uvažované okno. 
6. Algoritmy viditelnosti - Vrhání a sledování paprsku. Popište princip a rozdíly. 
Vrhání paprsku (ray casting): rastrová, obrazově orientovaná metoda. Hledáme nejbližší objekt 
zasažený paprskem směřující od pozorovatele a procházející průmětnou. 
Sledování paprsku (ray tracing): rastrová, objektově orientovaná metoda. Sledování nekončí po 
nalezení nejbližšího objektu, ale pokračuje dále podle materiálu (odrazivost a průhlednosti) tělesa 
(sledování paprsku vyššího řádu). Vysoká 
reálnost scény. 
R0 – primární paprsek, je vysílán z místa 
pozorovatele bodem obrazu 
R1,R2 (lomený) a R3 (odražený) – sekundární 
paprsek, je vytvořen po dopadu primárního 
nebo sekundárního paprsku na těleso. Může 
být odražený (od tělesa) nebo lomený (do 
tělesa). 
stínový paprsek – je vyslán z bodu, kam 
dopadl primární nebo sekundární paprsek ke 
světelnému zdroji. Jeho úkolem je zjistit, zda-li 
mezi bodem vyslání a světlem není nějaká 
překážka, která zastiňuje těleso. Počet odrazů paprsku je omezen hloubkou rekurze. Výpočet průsečíku s polygonem zabírá až 90% 
času výpočtu. 
Algoritmus: 
sledujPaprsek(paprsek R, hloubkaRekurze H) 
1. Nalezni průsečík P paprsku R s nejbližším tělesem ve scéně 
2. Pokud průsečík P neexistuje (paprsek opustil prostor scény), přiřaď paprsku R barvu pozadí 
a skonči 
3. Ke každému světelnému zdroji vyšli z bodu P stínový paprsek, a pokud k němu paprsek 
dorazí, označ světelný zdroj jako nezakrytý 
4. Vyhodnoť příspěvky osvětlení v bodě P od všech nezakrytých světelných zdrojů 
5. Pokud hloubka H nepřekročila maximální hloubku sledování, vyšli 
a. Odražený paprsek RR voláním sledujPaprsek(RR, H+1) 
b. Lomený paprsek RT voláním sledujPaprsek(RT, H+1) 
6. Paprsku R přiřaď výslednou barvu jako součet příspěvků osvětlení, barvy, odraženého 
paprsku RR a lomeného paprsku RT
7. Výpočet osvětlení ve scéně, metody stínování, Phongův osvětlovací model. 
Způsoby vykreslení prostorového modelu: 
Drátěný model: vykreslení hran nebo hranic ploch bez výpočtu viditelnosti. Nejednoznačný 
Obarvené těleso: vykreslení barevných ploch, podle nastavené barvy tělesa resp. plochy s ohledem 
na viditelnost 
Stínovaný model: vykreslení ploch s ohledem na světlo a pozorovatele 
Stínovaný model s vrženými stíny: výpočet vržených stínů, způsobených zakrytím zdroje světla 
Osvětlovací model: způsob výpočtu osvětlení v určitém bodě 
Phongův osvětlovací model: rozlišuje tři složky světla – ambientní, difúzní, spekulární. 
Základními prvky modelu v bodě P jsou normála povrchu (polygonu) n
r
, vektor dopadajícího světla 
l
r
, směr k pozorovateli v
r
 (viewvector), zrcadlově odražený paprsek (vektor symetrický k l
r
 podle 
n
r
) r
r
, r
r
= 2( l
r
. n
r
) n
r
 - l
r
. 
Ambientní složka: Všesměrové konstantní světlo, nezávisí na úhlu pohledu ani osvětlení. Zabraňuje 
tomu, aby odvrácené plochy byly černé. 
Většinou je bílé. A
I vyjadřuje intenzitu okolního světla. Tato veličina bývá konstantní pro celou 
scénu. a
r vyjadřuje schopnost povrchu odrážet okolní světlo, bývá obvykle totožná s d
r (koeficient 
difůzního odrazu). Jeho velikost určuje, je-li objekt světlý nebo tmavý. Určen pro jednotlivé složky 
RGB. Nabývá hodnot (0, 1). 
Difúzní složka: je charakteristická pro matná tělesa. Je nezávislá na směru pohledu. Představuje 
složku světla, které se při dopadu paprsku rozšíří do všech směrů. Je hlavní složkou vytvářející 
barevný odstín v závislosti na natočení plochy v prostoru. d
r je koeficient difúzního odrazu, udává, 
kolik dopadajícího světla se odrazí. Závisí pouze na úhlu dopadu, ne na směru pohledu. 
I I r (l n) d L d
r
r
= * .
Spekulární složka: je charakteristická pro lesklá tělesa. Intenzita této složky závisí na úhlu 
pozorování. Čím je menší úhel mezi zrcadlově odraženým paprskem ( r
r
) a vektorem, pod kterým 
se dívá pozorovatel, tím je větší intenzita. Scény bez spekulární složky světla jsou sice jasné a 
barevné, ale vypadají nereálně. Každý povrch má koeficient ( s
r ) vyjadřující kolik světla je 
povrchem odraženo, L
I reprezentuje barevné složení dopadajícího paprsku a h vyjadřující ostrost 
odrazu. 
( )
h
s L s
I I r v r
r r
= * .
Sečtením jednotlivých složek získáme rovnici Phongova osvětlovacího modelu. 
V s d a
I = I + I + I
Phongův osvětlovací model, lze jednoduše odvodit i pro několik světelných zdrojů. 
∑ [ ( ) ( )]
=
= + +
M
k
d k
h
IV
I A
ra
I L
rs
v rk
r l n k
1
* . .
r
r r r
Útlum intenzity světla: Intenzita klesá s druhou mocninou vzdálenosti od zdroje. Metody stínování: 
Vyhodnocování osvětlovacího modelu v každém bodě rastru obrazovky je velmi zdlouhavé, proto 
vzniklo několik metod, které umožňují vypočítat osvětlení pouze v několika specifických bodech 
objektu (polygonu) a zbylé hodnoty z nich odvozovat. Společný název pro tyto metody je stínování. 
Pomocí stínování lze simulovat zaoblenost objektů a tím zvýšit realitu scény. 
Konstantní stínování: Pro plochu je vypočítána jedna barva a ta je přiřazena všem bodům plochy.
Gouraudovo stínování: V každém vrcholu polygonu se vypočítá osvětlení a to je pak interpolováno 
do bodů pixelu. Vzhledem k metodě výpočtu, nemá smysl zvažovat zrcadlovou složku světla. 
Interpolace samotného odstínu barvy totiž nemůže způsobit místní zvýšení jasu na rovinné plošce. 
Phongovo stínování: Metoda předpokládá znalost normálových vektorů ve vrcholech plošky, ale 
nevypočítává v nich osvětlení, nýbrž interpoluje normálu s rasterizací plochy a vypočítává osvětlení 
pro každý bod rastru zvlášť. Dochází tedy k postupnému naklánění normál, tedy i ke správnému 
zvětšení velikosti jasu. 
8. Realistické zobrazení scény – textury. Způsoby použití a mapování. 
Textura se snaží o realistické zobrazení povrchu. Pomocí textury můžeme modulovat barvy na 
povrchu objektů, měnit parametry světelného modelu, modifikovat normálové vektory plochy 
(bump-mapping), napodobovat komplikované tvary (šum, vzory, fraktály, transparentní textury). 
1D textura – používá se pro definici opakujících se podélných vzorků (přechod pro chodce) 
2D textura – pokrývá povrch tělesa nebo jeho část (tapeta). Opakování textury, překlápění textury, 
bezešvé textury. 
3D textura – definuje hodnoty textury v prostoru, používají se k simulaci objektů, které vypadají 
jako vytesány z jednoho bloku materiálu. 
Mapování textury: proces nanášení textury na povrch tělesa. 
Inverzní mapování: pro každý pixel obrazu se určí odpovídající pixel v textuře (texel). 
Přímé mapování: pro každý pixel objektu (textury) se určí odpovídající pixel v obraze. 
Jako klasický zástupce inverzního mapování lze uvést lineární interpolaci (nesmí se zapomenout na 
korekci v paralelní projekci) – interpolace souřadnic textury. Interpolace textury – nejbližší soused,
hledaná hodnota je hodnota nejbližšího souseda (zaokrouhleni), bilineární interpolace – určení 
hodnoty na základě 4 nejbližších sousedů. 
MIP-mapping: z latinského multum in parvo (mnohé v malém). 
Při zmenšování objektu nebo při zvyšování vzdálenosti od 
pozorovatele jeho celková velikost klesá, a pokud budeme 
používat stále textury vysokého rozlišení, budeme zbytečně 
namáhat grafikou jednotku jejím přepočítáním a také bude vznikat 
moiré. Proto je vhodné použít více textur v různých rozlišeních. Při 
správném uspořádání textur do jednoho souboru vznikne MIPmapa. Textura o velikosti 512x512 je pak uložena v souboru, 
který má rozlišení 1024x1024. Jednotlivé kvadranty obsahují 
barevné složky RGB. Jediný levý pixel obsahuje průměrnou 
hodnotu celé textury. 
Interpolace textury: nejbližší soused, bilineární, trilineární. 
Mapování prostředí (environment mapping): odrážení okolního prostředí na povrch objektu, 
zrcadlové a skleněné objekty, nemusí být přesné. Odraz pohledu kolem normály. 
Podstatou je uzavření texturovaného objektu do jiného objektu a aplikace textury na jeho vnitřek. 
Ze středu uzavřeného objektu je vyslán primární paprsek (primary ray) a barva bodu objektu, 
který protne jako první je pak nanesena do textury (na povrch) objektu, který uzavírá původní 
objekt (často se používá koule či krychle). Nakonec je textura vzniklá na povrchu obklopujícího 
objektu (koule, krychle) namapována na původní objekt. 
Latitude-logntitude mapping: obdélník je mapován na kulovou plochu podle azimutu a zenitu. 
Malé zkreslení na ploše, velké pouze na pólech. 
Cube mapping: promítnutí na krychli. 
Bump-mapping: simulace hrbolatého povrchu, aniž by došlo ke změnám geometrie tělesa. 
Normálový vektor je při mapování textury pozměněn tak, aby změnil směr odrazu světla 
způsobem, jaký odpovídá lokálnímu zvrásnění hrbolatého tělesa. Orientace normály vypočtené 
hodnoty pro určitou plochu – přímá aplikace po načtení textury, orientace normály definovaná 
v textuře pro tečný prostor – nutno transformovat. Parallax mapping: transformace textury a normály na základě mapování výškové mapy. Určení 
výšky textury, výpočet posunutí v textuře na základě pohledového vektoru a výšky textury. 
Normal mapping: varianta Bump mappingu, normála určena absolutně pomocí textury, 
vypočítává se konkrétně pro daný povrch, zjednodušení geometrie. 
9. Realistické zobrazení scény – vržené stíny. Druhy stínů, metody výpočtu. 
Stíny nejen zvyšují realističnost scény, ale jsou také důležitým prvek pro vnímání prostoru. 
Výpočet stínů je však velice náročný. 
Tvrdé stíny (hard shadows): vznikají od bodového světla 
Měkké stíny (soft shadows): vznikají od plošného zdroje (krom tvrdého stínu vzniká i 
rozmazaný okraj – polostín). 
Vržený stín (cast shadow): vrhá jeden objekt na druhý, vnímáme jej častěji 
Vlastní stín (self shadow): vrhá objekt sám na sebe 
Projekční metoda: Určení stínu jako dvourozměrného polygonu, který vrhá stínící těleso na 
rovinnou projekční plochu = projekce vrcholů stínícího tělesa. 
Algoritmus: 
1. Vyřešíme viditelnost scény. 
2. Postupně určujeme stínové polygony pro všechna stínící tělesa a pro všechny projekční 
plochy, na které má dopadat stín. 
3. Vykreslujeme stínové polygony z pohledu kamery. Pokud je pixel projekční plochy ve 
stínovém polygonu, dojde ke ztmavení. Pozor na opakované ztmavení, nebo chybnou 
projekci stínového tělesa 
Nevýhody: možnost double-blending (dvojitého ztmavení), častá chybná projekce stínového tělesa. 
Možnost využití mapování stínových polygonů jako textur s rozmazáním. Vytváření pseudostínů – 
tvar stínu neodpovídá tvaru stínového tělesa. 
Stencil buffer (šablona): odstranění problému vykreslení stínu i mimo projekční plochu. 
Algoritmus: 
Používám paměť hloubky šablonu, při řešení viditelnosti nastavuju do šablony bity – 0 nebo 1, 
podle hodnot v šabloně určuju, kde budou vykresleny stínové polygony. 
1. První průchod 
a. Vykreslení scény s viditelností (z-buffer). 
b. Pro každý pixel příjemce se nastaví bit v šabloně. 
c. Pro všechny ostatní se bit vynuluje. 
2. Druhý průchod – s vypnutým z-bufferem se promítnou vrhači do roviny příjemce 
a. Nutno určit speciální projekční matici. 
b. Stínové polygony se kreslí pouze v místech s nastaveným příznakem v šabloně 
z prvního průchodu. 
c. U poloprůhledných stínů dojde ke ztmavení, aby nedocházelo k dvojímu ztmavení, 
je po prvním vykreslení stínového polygonu šablona vynulována. 
Stínová tělesa (volume shadows): vytvoření stínícího tělesa pro každý ze stínících objektů. Pro 
každý zobrazovaný objekt je nutné určit polohu se stínovým tělesem (polygon leží celý uvnitř – je 
ve stínu, polygon leží vně – je osvětlen, polygon leží částečně uvnitř a částečně vně – nutné 
rozdělení). 
Řešení na pixelové úrovni: při zobrazení se určuje, do 
kolika stínových těles vstoupil a vystoupil paprsek od 
pozorovatele. Lze využít z-buffer. 
Algoritmus: 
1. Určíme viditelnost scény z-bufferem. 
2. Každému pixelu z-bufferu přidáme čítač. 
3. Řešíme viditelnost stěn stínového tělesa. 
4. Pokud stěna leží před scénou, inkrementujeme 
čítač pro přivrácenou stěnu a dekrementujeme 
pro odvrácenou. 
5. Pokud se čítač rovná 0, je pixel osvětlen. 
6. Jinak je ve stínu. 
Stínová paměť hloubky (shadow depth map): využívá metodu určení viditelnosti z pozice 
zdroje světla a hloubkovou mapu pro každý zdroj světla. Každý viditelný bod se převede do 
souřadnic daného zdroje světla a porovná z s hloubkovou mapou (pokud je z-souradnice větší než 
souřadnice v hloubkové mapě, pak je pixel ve stínu, jinak je osvětlen). Algoritmus: 
1. Zobraz scénu z pohledu světelného zdroje L. Hodnoty z paměti hloubky (z-buffer) ulož do 
hloubkové mapy H. 
2. Zobraz scénu z pohledu kamery pomocí paměti hloubky. 
3. Pro všechny pixely [u,v] s hloubkou w zobrazené scény dělej: 
a. Převeď bod [u,v,w] do soustavy souřadnic zdroje světla L a získej tak jeho nové 
souřadnice [x,y,z]. 
b. A = H[x,y]. 
c. B = z. 
d. Pokud A < B, pak je pixel [u,v] ve stínu, jinak je zdrojem světla L osvětlen. 
10. Metody optimalizace vizualizace. 
Snaha o urychlení zobrazení scény, Real-time zobrazení. 
Zobrazení složitých scén: volba vhodných datových struktur, předzpracování scény, využití 
implementace v hw. 
Vytváření realisticky vypadajících scén: nahrazení klasických (pomalých) algoritmů (ray tracing, 
radiosity) přibližnými metodami, využití hw. 
Kde optimalizovat: 
Řešení viditelnosti: na objektové i rastrové úrovni (z-buffer back-to-front). 
Ořezávání: hledání průsečíku s ořezávacím objemem 
Výpočet kolizí: nárazy do stěn, kontakt při pohybu více objektů (konvexní obálky) 
Výpočet osvětlení a stínů: urychlení sledování paprsku, hledání průsečíku s paprskem 
Určení viditelnosti z bodu A do bodu B: vzájemná viditelnost 
Metody optimalizace: 
Double buffering – odstranění blikaní při vykreslení scény (použítí dvou image buffer). 
OpenGL: moýnost nastavení kam bude kresleno, glDrawBuffer, možnost vypnutí prohazování, další 
buffery pro stereoskopickou projekci (GL_FRONT_LEFT, _RIGHT, _BACK_) 
Vhodná reprezentace objektů (v závislosti na grafické knihovně – triangle strip, pozor na 
orientaci trojúhelníků). 
VertexArray - nahrazení volání jednotlivých funkcí glVertex, glColor…- definování vrcholů 
glVertexPointer(), glColorPointer()…, 
Vykreslení: glDrawElements(mode); 
 glBegin(GL_TRIANGLES); 
 glArrayElement(index); 
 glArrayElement(index); 
 glEnd(); 
glDrawArrays(); //vykreslí řadu geometrických primitiv 
DisplayList 
Redukce počtu zobrazených objektů na úrovni polygonů: 
backface culling – ořezání odvrácených ploch, není 
prováděna rasterizace… 
OpenGL: glEnable(GL_CULL_FACE) 
Důležití orientace trojúhelníků 
Frustum calling (ořezání pohledovým jehlanem, 
kvádrem): 3D – vytvoření obálek kolem objektů 
(koule). Následná detekce průsečíku koule a rovin 
omezujících pohledový objem. Střed koule musí 
ležet uvnitř nebo vně ve vzdálenosti menší než 
poloměr koule. 
2D – vytvoření obálek, promítnutí do průmětny, 
detekce středů v průmětně 
Snižování složitosti objektů LOD (level of detail) či 
MOD (motion of detail). 
Bounding box, bounding sphere, AABB (axis 
aligned bounding box – stěnz rovnoběžné s 
osami), OOBB (object oriented bounding box – 
definován středem apod.) 
Level of detail (LOD): zjednodušení objektů 
vzdálených od pozorovatele (jsou menší, zobrazují se na menší počet pixelů), je možné je zjednodušit bez snížení kvality výsledku. 
Metoda I. (contribution culling): Některé objekty nezobrazovat – např. interiér auta, které je 
vzdálené, gluProject(), gluUnProject(). 
Metoda II.(discrete LOD): Různě složité objekty pro různé vzdálenosti – nevýhodou je větší 
paměťová náročnost a nutnost vytvářet několik různě složitých modelů. 
Metoda III. (continuous LOD): Automatická degradace objektu – hranový kolaps. Těžko řešitelné 
v obecném případě. 
Oktanový strom (octree): rekurzivní dělení prostoru scény na 8 boxů. Boxy jsou reprezentovány 
listy stromu. Polygony mohou zasahovat do více boxů, lze označit příznakem, že polygon je už 
zobrazen. 
Postup při zobrazení: Začínáme v kořenu stromu a určujeme, zdali zadaný box zasahuje do 
výhledu. Pokud ano box je dále rozdělen a test se aplikuje na jeho potomky. Pro 2D úlohy 
Quadtree. 
Occlusion culling (ořezání obecným objemem): vyloučení pixelů, které jsou v konečné scéně 
překryty jinými pixely. Rozmístění speciálních polygonů ve scéně – occluders (ořezávače). DO 
scény umisťuju staticky při vytváření scény. 
BSP strom: rekurzivní dělení prostoru vybranou rovinou. Tvorba binárního stromu. Nutnost 
rozdělení polygonů protnutých rovinou 
Kd strom: k označuje dimenzi, v každé úrovni stromu dělení rovinou kolmou na jednu 
souřadnicovou osu, vyvažování stromu (složitost log(n)). 
Použití: frustrum cull.  occlusion culling  backface cull.  určení viditelnosti  contribution cull. 
11. Achromatické světlo v PG. Půltonování, rozptylování (náhodné, Floyd-Steinberg, 
maticové). 
Světlo se všemi vlnovými délkami o přibližně stejné intenzitě je bílé světlo. Odráží-li předmět vice 
něž 80% světla jeví se jako bílý, odráží-li méně než 10% světla jeví se jako černý. Z fyziologického 
hlediska není vnímání jasové stupnice lineární, ale logaritmické. Intenzita odraženého světla – 
fyzikální význam, vyzařování energie, jas – subjektivní vjem člověka. 
Jak zobrazit odstíny šedi: Jak zobrazit více odstínů šedi na zařízeních umožňující zobrazovat 
pouze omezený rozsah hodnot nebo pouze černou a bílou (tiskárna). 
Půltonování: Metoda vzorů, 
nahrazení intenzity jednoho 
pixelu odpovídající maticí bodů 
(zvětšování velikosti obrazu). 
Problém při vytváření velkých 
matic – pomalé, problém při 
tisknutí malých bodů – shlukování bodů. 
Barevné půltonování – pro každou barevnou složku zvlášť, použití různých vzorů pro eliminaci 
moiré. 
Konstantní prahování: zobrazení bodů s intenzitou větší než je hodnota prahu – bílá, jinak černá. 
Stejná velikost obrazu, avšak špatné znázornění obrazového vjemu. 
Rozptylování (dithering): Zobrazení odstínů šedi na dvouúrovňovém výstupním zařízení tak, aby 
výsledný vjem byl přibližně stejný, bez zvětšení obrazu. 
Náhodné: Použití náhodného rozdělení. Funkce generátoru náhodných čísel. 
Např. if (l[x,y] < random(15)) then putPixel(x,y,Black) 
else putPixel(x,y,White) 
Floyd-Steinberg: distribuce chyby. Rozdíl skutečné intenzity a intenzity zobrazovaného bodu je 
distribuován na okolní pixely. Určení prahové hodnoty P = (Imax + Imin)/2 a procházení po řádcích 
po jednotlivých pixelech. Ovlivňování zatím nezpracovaných pixelů, možnost postupovat oběma 
směry. Pokud je intenzita zpracovávaného pixelu menší než prahová hodnota, je pixel vykreslen černě a 
chybou se stává intenzita probíraného pixelu. Pokud je větší, chybou se stane W–intenzita 
probíraného pixelu (W je intenzita bílé). Chyba je distribuována na okolní pixely. 
Maticové rozptýlení: kombinace metody vzorů a náhodného rozptýlení. Hodnota prahu je získána 
z rozptylovací matice Dn o velikosti n x n. 
12. Barva a barevné modely, nepravé barvy, pseudo barvy, paleta barev, chromatický 
diagram. 
Rozsah viditelného světla elektromagnetického záření je 380 – 780 nm. 
Chromatické světlo: dopadá-li světlo na objekt, jsou některé frekvence odraženy a jiné pohlceny 
objektem. Kombinace frekvencí v odraženém světle vytváří barvu. Barva je vjem při pozorování 
světla určité vlnové délky. Člověk je schopen rozeznat 350 tis. odstínů. Monochromatické červené 
světlo dopadá na modrý objekt – jeví se jako černý.
Barva – vjem při pozorování světla určité vlnové délky. 
Lidské oko má na sítnici velké množství tyčinek a čípků (tyčinek cca 12x více). Tyčinky primárně 
zprostředkovávají noční vidění (více reagují na jas). Čípky jsou základem barevného vidění. 
Citlivost lidského okna na barevné složky není stejná. Červená (0.3), zelená (0.6), modrá (0.1). 
Doporučení používání barev: používání menšího počtu (4-6), nekreslit malé objekty a tenké čáry 
modře, na pozadí nepoužívat červenou a zelenou, nekreslit vedle sebe syté barvy ve vzdáleném 
spektru, používat barvy logicky a konzistentně. 
Lidské vnímání – velikost X okolí, tvar X barva, barva X okolí, statický obraz v pohybu 
Barevné modely: 
RGB – aditivní systém (CRT monitory), display. Složením všech složek (red, green, blue) vzniká 
bílá. 
RGBA (RGBα) – rozšiřuje RGB model o průhlednost, služku alfa. 0.0 znamená průhledný, 1.0 
neprůhledný. Barva pozadí Cp, barva objektu Co, výsledná barva Cv, Cv = αCo + (1 - α)Cp.
CMY – subtraktivní systém (tiskárny). Složením všech složek (cyan, magenta, yellow) vzniká černá. 
Později rozšířen na CMYK (přidána černá – použití v inkoustových tiskárnách). 
Převod mezi CMY a RGB je následující: 










−










=










b
g
r
y
m
c
1
1
1
Aditivní skládání barev – barvy se skládají ve výslednou barvu sečtením složek 
Intuitivní barevné modely: 
HSV (hue – tón, saturation – sytost, value – jas) – šestiboký jehlan. Nevýhodou je nesymetrie ve 
stupních šedi. S, V <0, 1>, H <0, 360> stupňů 
HLS (hue – tón, saturation – sytost, lightness – světlost) – dva jehlany na sobě dotýkající se 
podstavami. Odstraňuje některé nedostatky HSV modelu. H nedef., L, S <0, 1> 
Chromatický diagram CIE: standard základních barev, barva složena ze 3 základních barev, 
obalová spektrální křivka je tvořena všemi vlnovými délkami. Bod C odpovídá bílému dennímu 
světlu, bod E odpovídá achromatickému. 
Další barevné modely: 
YCBCR – používá se pro přenos televizního signálu ve formě SECAM a pro kódování barvy ve 
formátu JPEG, jasová složka Y <0, 1> oddělena od barevné CBCR <-0.5, 0.5> 
YUV – přenos televizního signálu ve formě PAL 
XYZ – virtuální barevný prostor (lineární převod na RGB pomocí matice). 
CIE-xy – normalizované barevné složky x, y, z. Informace pouze o odstínu a sytosti, neobsahuje 
jas. 
Převod RGB modelu na odstíny šedi: I = ,0 299.R + ,0 587.G + ,0 114.B
Paleta barev – seznam barev v určitém zápisu, které je možné reprodukovat. 
3-3-2 – 8b = 256 barev, pevná paleta 
5-6-5 – 16b = 65535 barev, jedna barva má 32 nebo 64 odstínů (high color) 
5-5-5 – 16b = 32768 barev, jedna barva má 32 odstínů (high color) 
8-8-8 – 24b = 16 mil barev, nejpoužívanější (true color) 
10-10-10 – 30 b = více než miliarda barev, zjemnění barevného přechodu (giga color) 
Adaptivní paleta – zaznamenává pouze použité barvy, vytvoření 3D histogramu Nepravé barvy – transformace výchozího barevného obrazu maticí. Zvýraznění určité barvy. 
Pseudo barvy – obraz s odstíny šedi lze převést na barevný obraz přiřazením barevného přechodu 
intervalu odstínů šedi. 
Blending – míchání barev alfa míchání, lineární interpolace X = αA + 1( −α)B , využití antialiasing, 
skládání obrazů, průhledné objekty. (Blending v OpenGL viz výše) 
17. Rastrové grafické formáty, komprese obecně. 
Rozdělení rastrových grafických formátů: 
Formát uložení barev – omezená množina barev, barevná paleta, true color, odstíny šedi, B/W 
Komprese – ztrátová, bezztrátová 
Rozklad obrazu – prokládání, skládání obrazu 
Negrafické informace – závislost na HW (přenositelnost), popis obrazu, řízení způsobu 
vykreslování, způsob vytvoření (EXIF) 
Komprese – transformace dat z jedné reprezentace do druhé. Zmenšení velikosti dat při 
zachování všech informací nutných k zpětné rekonstrukci. Odstranění redundance dat (prostorová, 
spektrální, časová). Odstranění dat nedůležitých pro lidské vnímání. 
Kritéria komprese – kompresní poměr, kvalita rekonstrukce, cena za kompresy (paměťová a 
časová náročnost algoritmu – různé pro kompresi a dekompresi). 
Kompresní poměr – faktor komprimace 
velikost komprimovanych dat
orig velikost dat C
_ _
_. _
=
Počet bitů na pixel
Nb <0,25 – 0,50> Prostřední až dobrá kvalita 
Nb <0,50 – 0,75> Dobrá až velmi dobrá kvalita 
Nb <0,75 – 1,00> Výborná kvalita 
Nb <1,50 – 2,00> Nerozeznatelný od originálu 
Kvalita rekonstrukce – střední kvadratická odchylka (Root Mean Square) 
= ∑∑ −
m
i
n
j
ij ij a b
mn
RMS 2
( )
1
 Vyjadřuje podobnost původního s dekomprimovaným obrazem 
Bezztrátová komprese – zachovává věrnost obrazu (medicína, geografie), má nižší kompres
 ní poměr (většinou 3:1, ale záleží na povaze dat), odstraňuje redundance dat. 
Typy komprese: RLE, LZW, CCITT. 
Pixelové zhušťování: Využívaní 
volného místa při zápisu dat do 
souboru. 
Ztrátová komprese – vysoká komprese (až 50:1). Dochází k redukci barev a ztráty přesnosti 
geometrických tvarů. 
Princip – transformace obrazu do prostoru atributů (DCT, FFT, …). Fraktálová komprese 
(soběpodobnost, transformace). Převod do barevného modelu YCBCR a redukce. 
5,0 ,0 4187 ,0 0813 128
,0 1687 ,0 3133 5,0 128
,0 299 ,0 587 ,0 114
= − − +
= − − + +
= + +
C R G B
C R G B
Y R G B
R
B
Diskrétní kosinová transformace – transformace obrazového prostoru f(x,y) do prostoru kosinových 
funkcí F(u,v). 
pocet pixelu
pocet zakodovanych bitu Nb
_
_ _
=18. Komprese grafických dat : LZW, RLE, Huffman. 
RLE – kódování běhu (run lenght encoding) 
Kontextově závislá komprese – předpokládá, že obraz je složen z oblastí, které jsou vyplněny 
charakteristickou barvou. Pixely stejné barvy efektivně komprimuje jako četnost znaku a jeho 
hodnotu. 
Aplikace algoritmu – horizontální, vertikální, uhlopříčkové, binární, bytová, pixelová, řádková 
úroveň. 
Příklad: 
původní sekvence: 2 4 6 5 5 5 5 6 3 1 0 4 4 4 4 4 4 4 3 2 
kódovaná sekvence: 2 4 6 ESC 5 4 6 3 1 0 ESC 4 7 3 2 
odstranění ESC: 2 4 6 1 5 4 6 3 1 1 1 0 1 4 7 3 2 
aplikace algoritmu – horizontální, vertikální, úhlopříčkou, binární, pixelová… 
Formáty: PCX, TGA, JPEG, JFIF 
LZW – slovníková metoda komprese (Lampel, Ziv, Welch) 
Substituční algoritmus. Postupně rostoucí slovník vytvářený za běhu. Délka kódu je kratší než délka 
kódovacího řetězce. Rozšířená vstupní abeceda (12 bitů). Na výstupu pouze indexy do slovníku. 
Slovník vytvářen při kódování i dekódování (není nutné jej přenášet). Speciální znaky na vytváření 
a mazání slovníku. Jednoduchý algoritmus, nesnadná implementace. Odstranění šumu před 
kompresí zvyšuje kompresní poměr. 
Formáty: GIF, TIFF, zip, arj, lharc. 
Příklad: kódování sekvence „web-web-web!“ 
Slovník: 
256 we 
257 eb 
258 b259 -w 
260 web 
261 b-w 
262 web! 
263 ! 
CCITT Huffmanovo kódování – statistická metoda komprese 
Zjišťuje četnost výskytu hodnot. Používá prefixový kód. Každá hodnota je reprezentována unikátní 
bitovou kombinací (morseova abeceda, směrovací telefonní čísla). 
Komprese – spočítat výskyty všech znaků, setřídit podle počtu výskytů, vytvořit binární strom, pro 
každou hodnotu najít binární reprezentaci. 
Dekomprese – načíst počáteční hodnoty a vytvořit strom, čtení bitu ze souboru a procházení 
stromu. 
Používá se statický nebo dynamický strom. 
Formáty: JPEG, TIFF, FAX 
Příklad: symboly – s1, s2, s3, s4, s5 
Pravděpodobnosti – p1 = 1/2, p2 = 1/4, p3 = 1/8, p4 = 
1/16, p5 = 1/16 
Kódovací tabulka 
s1 = 0 
s2 = 10 
s3 = 110 
s4 = 1110 
s5 = 1111 
Počet bytů Huffmanova kódování ∑[ ]
=
= −
N
i
H pi
l
1
2
log
N – počet symbolů 
Char String+Char In Table? New Comments 
w we NO 256 root char 
e eb NO 257 root char 
b b- NO 258 root char 
- -w NO 259 root char 
w we YES (256) 256 match found 
e web NO 260 root char 
b b- YES (258) 258 match found 
- b-w NO 261 root char 
w we YES (256) 256 match found 
e web YES (260) 260 match found 
b web! NO 262 root char 
! ! NO 263 root char 19. Grafické formáty: GIF, TIFF, PCX, JPEG atd. 
PCX – původně jen 16 barev, postupně rozšířen na 24 bitů. Využívá RLE kompresi (nemusí vždy 
dojít ke komprimaci – zašuměná data). Na formátu PCX je zachycen vývoj grafických adaptérů na 
PC (monochromatický – 2 barvy, CGA – 4 barvy, EGA – 8 barev, VGA – 16 barev, Extended VGA – 
256 barev, True Color – 16 mil barev). 
GIF (Grafics Interchange Format) – firma Compuserve, paleta pouze 256 barev, LZW komprese 
(12-ti bitová). 
Verze 87a – prokládání obrazu v pruzích, umístění bloků na pozadí. 
Verze 89a – doprovodný text vypisovaný na obrazovku, řízení grafiky (průhlednost, animace) 
Firma Unisys vydala později patent na LZW kompresy a tím pohřbila GIF formát. Budiž mu země 
lehká! 
Použití: www stránky 
TIFF (Tag Image File Format) – vysoká univerzálnost (různé kódování bitů, barevné modely, 
druhy komprese – RLE, LZW, JPEG). 
Různé kategorie datových položek – velikost, způsoby reprezentace, pomocné – jméno autora, 
datum, vlastní data – pruhy, interpretace – šedotónový, RGB, binární maska. 
Použití v DTP, zpracování obrazu. 
PNG (Portable Network Graphics) – primárně určen pro internet. Reakce na licencování LZW 
algoritmu a GIF formátu. Bezztrátová komprese, nezávislá na platformě. Barvy RGB, index do 
palety. 
Vlastnosti srovnatelné s GIF: bezztrátová komprese LZ77 + Huffmanovo – lepší než GIF 
Prokládání (progresivní mód), průhlednost, textová informace v obraze 
Nové vlastnosti: True Color paleta, grayscale paleta, alfa kanál – průhlednost, gamma korekce 
(věrné zobrazení), detekce poškozených dat při přenosu, rychlejší zobrazení náhledu 
v progresivním průchodu, různé komprese a kompresní filtry. 
Skládá se ze shluků (chunk). Povinné chunks – hlavička (délka, typ, CRC), paleta, obrazová data, 
zakončení. Pomocné chunks – průhlednost, gamma korekce, barevný rozsah, sRGB prostor, ICC 
profil, text (iso-8859-1), barva pozadí, histogram, pozice obrázku na stránce… 
JPEG File Interchange Format – obsahuje faktor nastavení kvality Q. Fotografie komprimována 
kompresním poměrem 20:1 je bez výrazné újmy kvality. 
Postup komprese: transformace předlohy do optimálního barevného prostředí (YCBCR), redukce 
barev (vzorkování komponent průměrnými skupinami pixelů), zavedení DCT (diskrétní kosinová 
transformace) na blok pixelů 8x8, kvantizace DCT koeficientů, cik-cak výběr výsledných koeficientů 
a jejich kódování Huffmanovým kódováním. JPEG je vždy ztrátový (zaokrouhlování DCT 
koeficientů). 
JPEG2000 – kompresní algoritmus založení na vlnkové transformaci (bez čtverců 8x8). Lepší, 
rychlejší a kvalitnější komprese. Větší odolnost vůči chybám v datovém toku. Možnost zpracovávat 
obrázky větší než 64tisx64tis pixelů. Kvalitní zpracování počítačově generované grafiky s ostrými 
přechody. Možnost využití různých barevných módů. Progresivní přenos. Ukládání metadat. 
Další formáty: Targa – TGA (pseudo-barevné – jedna paleta, přímo-barevné – paleta pro každou 
barevnou složku, truecolor), Sun Rasterfile (RGB nebo BGR, komprimace RLE), SGI, Kodak Photo 
CD (různá rozlišení v jednom souboru), Windows Bitmap (binární obraz, RLE komprese), JNG (JPEG 
Network Graphics, kombinace PNG a JPEG), MNG (spojení JPEG, PNG a animace), DjVu (smíšený 
rastrový obsah, lepší komprese než JPEG, odstranění artefaktů), MrSID (pro extrémní rozlišení 
(družice))… 
Výběr vhodného formátu: účel (fotka, animace, kreslení grafika), barevné hloubky (truecolor, 
paleta, gray-level), průhlednost, velikost obrazu, komprese (kvalita) 
20. Počítačové vidění a rozpoznávání, řetězec zpracování a rozpoznávání obrazu, 
aplikace. 
Trojrozměrné rozpoznávání – projekcí trojrozměrného objektu do roviny ztrácíme informace o 
tvaru. Snaha o rekonstrukci. 
Dvojrozměrné rozpoznávání – rozpoznávání znaků na listu papíru (OCR), analýza biologických 
preparátů. 
Počítačové vidění se snaží o interpretaci zobrazených dat. (viz obrázek v otázce 1) Řetězec zpracování a rozpoznávání obrazu: 
Snímání, digitalizace a uložení -> předzpracování -> segmentace obrazu na objekty -> popis 
objektů -> porozumění obsahu obrazu 
Aplikace počítačového vidění a rozpoznávání obrazu:
Rozpoznávání textu (OCR) – tištěné nebo ručně psané dokumenty 
Dálkový průzkum země – letecké a družicové snímky, předpověď počasí, mapování 
Biomedicíncké aplikace – analýza historických a biologických preparátů 
Sledování dopravního provozu 
Identifikace lidí – otisky prstů, rozpoznávání tváří, podpisů, bankovní sektor 
Pohyb robota – rozpoznávání okolí, překážek a cílů, navádění 
Výhody počítačového zpracování – opakovatelnost, neúnavnost techniky, flexibilita, nižší náklady, 
standardizace. 
21. Snímání obrazu, požadavky na snímání, digitalizace obrazu. 
Požadavky na snímače: 
Vzorkování – hustota vzorkování, udává se v Mpix (Megapixel). Jiné pro statické a dynamické 
snímání. 
Kvantování – počet snímaných úrovní (barevná hloubka). Snímání jednotlivých barevných složek 
(filtry), kvalita analog-digitálního převodníku, kvalita snímače (člověk 60 úrovní, snímač 256-
1024). 
Digitalizace – převod analogových dat (signálu) na digitální data. Vstup je spojitý analogový 
signál. Vzorkování – hustota vzorků, kvantování – vyjádření amplitudy = digitální údaj. 
Vzorkování – vzorkování spojité funkce f(x) je 
zaznamenávání hodnot (vzorků), v předem daných 
intervalech. 
Problémy při vzorkování – Nyquistovo kritérium – 
pokud je funkce frekvenčně omezená, tj. v jejím 
frekvenčním spektru existuje maximální frekvence 
fmax, musíme vzorkovat tuto funkci frekvencí vyšší 
než 2fmax, jinak vzniká alias. 
Prostorový alias – zubaté čáry, zvětšené rastrové 
písmo, … 
Časový alias – blikání, interference cyklického pohybu se snímkovou frekvencí (rotor u vrtulníku) 
Při pozorování lidským okem nebo při fotografování alias nevzniká (rychle pohybující objekty, nebo 
příliš malé objekty se rozbrazí rozmazaně). 
Problém aliasu v počítačovém zpracování je hlavně v zobrazování v diskrétním rastru (anti aliasing) 
a při snímání obrazu. 
Typy vzorkování: 
Pravidelné vzorkování (uniform sampling) – neodstraňuje rušivé interference, K x K pravidelných 
vzorků. 
Náhodné vzorkování (random sampling) – možnost vytváření shluků, velký podíl šumu na 
výsledku, N nezávislých náhodných vzorků. 
Roztřesení (jittering) – omezení výskytu velkých shluků, rovnoměrnější pokrytí, K x K náhodných 
vzorků v intervalech. 
Poissonovo diskové vzorkování (Poisson disk sampling) – napodobuje rozmístění světločivných 
buněk oka, zamezuje vytváření shluků, obtížná efektivní implementace, vzdálenost vzorků menší 
než d, N vzorků. 
 Pravidelné vzorkování Náhodné vzorkování Roztřezení Poissonovo diskové vz. Kvantování – probíhá v oboru hodnot obrazové funkce, který rozdělí na intervaly, jimž je pak 
přidělena jediná, zástupná hodnota. Kvantizační chyba – množina hodnot je nahrazena zástupnou 
hodnotou. Podle způsobu rozdělení kvantové veličiny se dělí na uniformní a neuniformní 
kvantování. Uniformní kvantování má konstantní délku intervalu, narozdíl od neuniformního. 
Neuniformní je výhodné pro nerovnoměrné rozložení měřené veličiny, technicky náročnější. 
Snímání – kvalitní snímání je základ úspěchu. Vstupní informace závisí na fyzikálním principu 
snímání (jas, intenzita, rentgenové záření, teplota, vzdálenost, …). 
Scanner – snímá statické předlohy, dlouhá doba snímání, optické snímání s mechanickým 
pohybem, barevné filtry pro získání jednotlivých složek. 
2D – CCD nebo CMOS chip, 3D – pasivní, aktivní 
CCD (Charge Coupled Device) – snímání odraženého světla (zářivka) 
CIS (Contact Image Sensor) – tříbarevné LED diody (levnější, méně kvalitní) 
CCD chip – nábojově vázané prvky, matice kapacitních polovodičů, akumulace elektrického náboje 
o velikosti úměrné intenzitě dopadajícího světla v době osvícení, lepší světelná citlivost 
CMOS chip – levnější a jednodušší technologie, náboj získaný převodem světla měřený v místě 
pixelu 
Běžný senzor CMOS nebo CCD s barevnými filtry vedle sebe snímá pouze část světla (1/4 red, 1/4 
blue, 2/4 green). Foveon X3 senzor obsahuje pro každý pixel 3 vrstvy (RGB) pod sebou. Světlo je 
tedy snímáno pro každou složku zvlášť. 
Super CCD – 2 typy pixelů, velké a citlivé S-pixely, malé R-pixely – méně citlivé, tam kde S-pixely 
už dávají bílou, ještě rozlišují barvu 
3D snímání – přímé získání prostorové informace o objektu. 
Pasivní triangulace (stereoskopické vnímání) – využívá dvou pohledů z různých úhlů, 2D obrazy 
zachycené ze dvou různých míst, dva perspektivní obrazy, hledání korespondujících částí 
Aktivní triangulace: 
Jedno a více barevné osvětlení objektu – promítána pravidelná mřížka nebo barevný přechod na 
povrch objektu, nerovnosti povrchu deformují obraz 
Dotykové snímání – mechanický scanner, pohyblivé rameno se snímáním 3D pozice. Dotyková 
sonda. Ruční nebo strojní snímání. 
Laserové snímání – laserový scanner vysílá paprsek, který se odrazí od předmětu a vrátí se zpět do 
snímacího zařízení. Předmět se otáčí, nebo scanner krouží kolem. Snímána i barva předmětu 
později použitá pro texturu. 
Medicínské scannery – počítačová tomografie, magnetická rezonance, konfokální mikroskopie. 
Snímání řady rovnoběžných řezů. 
Destruktivní získání 3D informace – rozřezání na plátky, registrace řezů na sebe, voxelová 
reprezentace modelu 
Družicová data – dosah až tisíce km, vícespektrální senzory, stereoskopické snímání – vytváření 
modelu povrchu 
22. Předzpracování obrazu, transformace obrazu, úprava jasové funkce, konvoluce. 
Vlastnosti digitálního obrazu: 
Vzdálenost – euklidovská (černá), chessboard (červená), city-blok (zelená) 
Sousednost – 4-sousedství 8-sousedství 
Cesta – posloupnost A1, A2, …, An
AI je sousedem AI+1
Oblast – množina obrazových elementů, 
takových, že existuje cesta patřící celá do množiny. 
Pozadí – podmnožina doplňků všech oblastí souvislá s okrajem obrazu 
Díry – ostatní části doplňků všech oblastí 
Jednoduše souvislá oblast – neobsahuje díry 
Vícenásobně souvislá oblast – obsahuje díry 
Hranice – množina všech obrazových elementů sousedících alespoň s jedním elementem 
nepatřícím do oblasti. 
Předzpracování obrazu – snaha o získání lepšího obrazu, zdůraznění některé informace, získání 
určité informace. 
Histogram – vektor s počtem složek rovným počtu jasových úrovní. Každá složka odpovídá četnosti 
N pixelů příslušného jasu u. Globální informace o obraze vyjádřené grafem. Úprava jasové funkce 
práh - modrá 
inverze - zelená 
okénko - červená 
nepravé barvy – namapování původních jasových hodnot na nový barevný 
přechod. 
Kontrast a jas – intenzita l(x,y) = <0,1> 
Lineární transformace -> l′(x, y) = j + k(l(x, y) − i)
Úprava jasu je posun přímky doprava nebo doleva. 
Úprava kontrastu je změna sklonu 
přímky. Gamma korekce je změna 
z lineární funkce na funkci logaritmickou. 
l(x, y)=
γ
l′(x, y) , přizpůsobení oku. 
Vyrovnání histogramu – jde o nalezení 
mapovací funkce, která rozloží hodnoty 
v histogramu rovnoměrně. Výsledkem je jasově vyrovnaný obraz. Nemění se četnosti ale úrovně 
intenzit. 
Vyhlazení histogramu – histogram osahuje řadu lokálních minim a maxim. Histogram se vyhlazuje 
váženým průměrem. 
Transformace obrazu – ořezání oblasti zájmu, geometrické transformace obrazu (posunutí, 
zvětšení, otočení). 
Dopředné mapování – transformace rastrového obrazu. Mapování jednotlivých transformovaných 
pixelů vstupního obrazu do výstupního rastru. Možnost vzniku děr ve výstupním obraze způsobený 
zaokrouhlením transformované souřadnice. 
Zpětné mapování – pro každý pixel výstupního obrazu hledáme ve vstupním obraze pixel určený 
zpětnou (inverzní) transformací (problém jak nejlépe určit hodnotu – interpolace). 
Interpolace 
Nejbližší soused – hledaná hodnota je hodnota nejbližšího souseda. Používá se zaokrouhlení. 
Bilineární interpolace – určení hodnoty na základě nejbližších čtyř sousedů 
Bikubická interpolace – místo lineární funkce se použije funkce kubická. Nejbližších 16 pixelů. 
Kosinová interpolace – určení hodnoty na základě nejbližších 4 sousedů. Místo lineární funkce je 
použitá funkce kosinus. 
Konvoluce – viz. následující otázka 
23. Filtrace obrazu, gradientní operátory. 
Filtrace – snaha o získání lepšího obrazu. Operace zpracování obrazu na úrovni obrazových dat. 
Vyhlazení obrazu – filtrace šumu. Potlačení vyšších frekvencí (šumu). Dochází k potlačení malých 
detailů. 
Gradientní operace – zdůraznění vyšších frekvencí. -> zvýraznění hran. 
Filtrace pomocí konvoluce 
Funkci h(x) označíme jako konvoluční jádro (lze ho přirovnat k oknu, které se posunuje po obraze). 
Hodnoty konvolučního jádra určují způsob výpočtu nového pixelu v obraze. Při práci s digitálním 
obrazem se používá diskrétní konvoluce, která je diskrétní dvourozměrnou podobou integrálu -> 
jádro diskrétní konvoluce je matice o rozměrech k x k. Význam konvoluce je takový, že výstupní 
obraz získáme tak, že na každý bod vstupního obrazu položíme konvoluční jádro a vypočítáme 
součet. Pro obraz se provede konstantní počet operací, tudíž je konvoluce nezávislá na datech. 
U vyšších řádů matice je konvoluce pomocí násobení matic časově náročná. Vhodným rozkladem 
matice lze násobení urychlit. 
Interpolace konvoluční maticí – zvětšení obrazu o celočíselný zoom. Nejdříve dojde k vložení 
prázdných řádků do obrazu, pak je obraz vynásoben konvoluční filtrem. 
Obyčejné průměrování – nový jas je průměrem okolních hodnot, lze popsat pomocí diskrétní 
konvoluce. Nevýhodou je rozmazání hran. Pro konvoluční masku 3x3. 
Průměrování s omezením změn jasu – výsledek průměrování se musí lišit od původní 
neprůměrkované hodnoty pouze o danou hodnotu 
Filtrace pomocí mediánu – nechť x je náhodný jev, M(x) je hodnota, pro kterou platí M(x)>x 
s p=1/2 (hodnota ležící uprostřed seřazené posloupnosti). Čtvercové okolí porušuje tenké čáry a 
rohy. OS filtrace (order statistic) – setřídění podle hodnot jasu, výběr minima a maxima, případně 
lineární kombinace obou. 
Metoda rotující masky – podle homogenity jasu se nachází k filtrovanému bodu část okolí, ke 
kterému pravděpodobně patří. Do filtrace jsou zahrnuty pouze pixely, které obsahují hrany. 
Průměrování odstraňuje šum a nerozmazává hrany. 
Frekvenční filtry – fourierova transformace převádí hodnoty do frekvenční oblasti. 
Dolní propust – odstraňuje z obrazu složky s vyšší frekvencí -> odstraňuje detaily a šum. 
Horní propust – odstraňuje z obrazu složky s nižší frekvencí a stejnosměrnou složku -> detekce 
bodu. 
Pásmová propust – propouští pouze vybrané složky prostorových frekvencí. Vyšší dimenze matice 
filtru (minimálně 5). Navržení filtrů pro konkrétní aplikace. 
Gradientní filtry – v diskrétním oboru je diference, jinak jsou to parciální derivace. 
Robertův operátor – výpočet gradientu z lokálního okolí, velká citlivost na šum. 
Sobelův operátor – aproximuje první derivaci, je směrově závislý, matice pro 8 směrů, velikost 
hran, směr hran. 
Laplaceův operátor – aproximuje druhou derivaci, necitlivý vůči otočení, udává velikost hrany, ne 
směr, matice pro 4 a 8 sousednost. 
Další gradientní operátory – Robinsonův, Krischův, Prewittové, … 
Bez znalosti obrazu nelze určit, který z operátorů bude lepší. Bhodný operátor se vybírá pokusem. 
Operátory průchodu nulou – 2. derivace prochází v místě hrany nulou, prakticky je jednodušší 
hledat průchod nulou než maximum. Funkce lze vyhladit Gaussovým rozložením. 
Cannyho hranový detektor – optimalizační úloha (3 kritéria), detekce (žádná z hran nesmí být 
nepovšimnuta), lokalizace (rozdíl mezi skutečnou a nalezenou hranou musí být minimální), 
nereagovat na jednu hranu vícenásobně. 
24. Segmentace obrazu, prahování, segmentace na základě detekce hran, Houghova 
transformace, segmentace narůstání oblastí a srovnávání se vzorem. 
Segmentace obrazu – snaha rozčlenit obraz na části (oblasti, segmenty), související s objekty 
reálného světa. Kompletní x částečná segmentace (všechny segmenty korespondují x nemusí 
korespondovat s objekty reálného světa). 
Způsoby segmentace obrazu – dokonalá a správná segmentace obrazu vyžaduje znalost 
konkrétního řešeného problému. Přínos segmentace je výrazná redukce objemu dat. Částečná 
segmentace může být postupně zpřesňována v následujících krocích a ve vyšších úrovních 
zpracování. 
Segmentace založená na: 
Globální vlastnosti obrazu nebo jeho části – histogram 
Určování hranic mezi oblastmi – jas, textura, gradient 
Přímé vytváření oblastí – duální problém k vytváření hranic 
Segmentace prahováním – nejstarší metoda založená pouze na určení jasové konstanty 
oddělující objekty od pozadí. Volba hodnoty prahu je zásadní, málokdy lze použít jednu hodnotu 
pro celý obraz. Problémy s nestejným osvětlením scény -> různé hodnoty prahu pro různé oblasti. 
Poloprahování – vynulování pozadí, ale zachování intenzit jasů všech objektů. 
Prahování s více prahy, prahování podle určitého intervalu nebo množiny vybraných hodnot 
Metody určení prahu: 
Pevné hodnoty prahu - známé „kalibrované“ stupnice podle použitého fyzikálního principu snímání 
(medicínské scannery), 
Procentní prahování – znalost procentuálního pokrytí plochy objekty (tisk), z histogramu určíme 
hodnotu prahu podle procentuálního pokrytí. 
Analýza histogramu – podle počtů vrcholů (nejednoznačné), hodnota mezi vrcholy určuje hodnotu 
prahu. Nebo proložit Gaussovým normálním náhodným rozdělením, minimum však nemusí být 
správná hodnota (šum – odstraňuje se vyhlazením histogramu). Segmentace barevných obrázků 
po barevných složkách. 
Iterační metoda určení prahu – 4 pixely ležící v rozích obrazu jsou pixely pozadí. Ostatní pixely 
náleží segmentovanému objektu. 
Segmentace na základě detekce hran – používá detekce hran pomocí operátorů (Sobel), 
spojování hran do řetězců odpovídajících průběhu hranice. 
Prahování obrazu hran – zjištění velikosti hran, prahování, potlačení některých hran a filtrace. 
Sledování hranice – určení binárního obrazu, pohyb po hranici (čtyř a osmi souslednost), uzavření 
hranice návratem do původního bodu. Potlačení hran s nemaximální hodnotou – určení velikosti a směru hrany každého pixelu vstupního 
obrazu (Sobel 8-směr). Pro každý pixel s nenulovou velikostí hrany vyšetřit 
sousední pixely kolmé na hranu. Pokud jejich velikost hran je větší než 
vyšetřovaný pixel označit pixel pro následné smazání. Po vyšetření všech pixelů 
znovu projít obraz a vynulovat hodnoty hran pixelů určených ke smazání. 
Filtrace hranového detektoru s hysterezí – určení intervalu hystereze, pixely 
s hodnotu větší než T1 označ jako hranu, menší než T0 nejsou hrana, mezi T0 a T1 – rozhodni 
podle okolí pixelu. 
Sledování vnitřní hranice oblasti – najdi horní levý pixel P0
zkoumané oblasti, prohledej okolí pixelu proti směru hodinových 
ručiček, první nalezený pixel Pn je další pixel vnitřní hranice oblasti. 
Jestliže narazíš na původní pixel tak konec jinak pokračuj. Možná 
modifikace na 8-souslednost. 
Kritéria segmentace na základě detekce hran: 
Heuristické sledování hranice – kritéria: velikost hran tvořící hranici, 
přiměřené zakřivení hranice, vzdálenost od předpokládané hranice, 
odhad ceny cesty z uzlu do koncového uzlu, zjednodušení stromu 
řešení, nejmenší maximální ceny spoje, hledání s omezením ceny -> 
využívá algoritmy z teorie grafů. 
Houghova transformace – úloha nalezení daného předmětu v obraze. Detekce přímek, kružnic, 
atd… Nutná znalost rovnice hraničních přímek. Necitlivost výsledků na šum a nedokonalá data. Pro 
všechny body obrazového prostoru lze nalézt obraz odpovídající všem možným přímkám 
procházejících obrazovým bodem. Obrazem je opět přímka. Průsečík přímek nám udává parametry 
hledané přímky. 
Zobecněná Houghova transformace – zobecnění pro hledání kruhových oblastí. Používá se 
k nalezení objektů s těžko popsatelnou hranicí při známé velikosti a natočení v obraze. Nejdříve se 
určí referenční bod R, ze kterého se vrhají paprsky, a v průsečíku s hranící se stanoví tečna. 
Vytvoří se R-tabulka s délkami paprsků a úhly tečen. 
Segmentace narůstáním oblastí – segmentace oblastí je duální problém k hledání hranice. 
V praxi je výhodné oba přístupy kombinovat. 
Homogenita oblastí – závisí na konkrétním segmentačním mechanizmu, může být založena na 
různých parametrech (odstín šedi, tvar, textura, střední hodnota jasu, …). Výsledná oblast 
v segmentovaném obraze musí být homogenní a současně maximální. 
Algoritmy segmentace – spojování oblastí (odstraňování hranic), štěpení oblastí, určování 
sousednosti oblastí. 
Segmentace srovnáváním se vzorem – testování souhlasu vzoru s obrazem (výpočet korelace). 
Problémy nastávají při geometrické transformaci objektu v obraze (otočení, změna tvaru, …). Pro 
všechny možné transformace se určuje míra souhlasu obrazu se vzorem. Podle lokálního maxima 
se určují koeficienty transformace. 
Ruční a poloautomatická segmentace – zakreslování hranice, definování intervalu intenzit jasu, 
zakreslení omezujících křivek, segmentace objektu nebo okolí, je hranice součástí objektu nebo 
pozadí, … 
Homotopický strom – vyjadřuje spojitost, homotopické operace nemění spojitost objektů a děr, 
kořen stromu je pozadí scény. 
Skelet – kostra objektu (morfologická informace), sjednocení středu kružnic 
obsažených v objektu a dotýkajících se hranice objektu alespoň ve dvou 
bodech (konvexní obálka). 
Matematická morfologie – nauka o tvarech. Obraz je reprezentován bodovou množinou 
v dvourozměrném Euklidovském prostoru E2
. Každá morfologická transformace má duální 
transformaci. 
Základní operace – dilatace, eroze, otevření, uzavření. 
Použití matematické morfologie – předzpracování (odstranění šumu, zjednodušení tvarů objektů), 
zdůraznění struktury objektů (kostra, ztenčování, zesilování), popis objektů číselnými 
charakteristikami (plocha, obvod, …). Dilatace – skládá body množin pomocí vektorového součinu. Objekty se rozrůstají podle velikosti 
strukturního objektu. Díry malé tloušťky se zaplňují. 
Eroze – dualita vůči erozi (ne inverze!). Zjednodušení struktury objektů, rozklad objektů 
spojených čarami na více objektů, nalezení obrysů objektů. 
Rozdíl dilatace a eroze – obrys. 
Otevření a uzavření – používá se pro odstranění detailů menších, než je velikost strukturního 
elementu. Otevření oddělí objekty spojené úzkou šíjí a tím zjednoduší strukturu objektu. Uzavření 
zaplní malé díry a vyhladí obrys úzkých zálivů. 
Idempotentnost – opakované použití operací se stejným strukturním elementem nemění výsledek. 
Další operace: ztenčování, zesilování, hit or miss, … 
25. Popis objektů a porozumění obrazu. 
Kvantitativní popis – číselné charakteristiky. 
Kvalitativní popis – relace mezi objekty, reprezentace grafem. 
Identifikace oblastí – přiřazení jednoznačného identifikátoru nebo obarvení oblastí. 
Algoritmus barvení – postupné procházení binárního obrazu po řádcích, každému nenulovému 
elementu přiřadit hodnotu (sousední elementy jsou pozadí – nová hodnota barevní obrazových 
elementů, jeden sousední element je nenulový – obarvit obrazový element touto barvou, sousední 
elementy mají různé nenulové hodnoty – obarvit jednou z těchto hodnot a zapsat do tabulky 
ekvivalencí), druhý průchod obrazu a obarvení oblastí obarvených více barvami stejnou barvou 
podle tabulky ekvivalence barev. 
Skalární popis oblasti – počet obrazových elementů, plocha jednotlivých elementů. Rozdíl počtu 
souvislých částí a počtu děr. 
Velikost – počet obrazových elementů, lze uvažovat skutečná velikost elementů 
Eulerovo číslo – rozdíl počtu souvislých částí a počtu děr 
Projekce, výška, šířka – horizontální, vertikální projekce, určuje se pro binární obraz 
Podlouhlost – poměr šířky a výšky opsaného obdélníka 
sirka
vyska polodlouhost =
Pravoúhlost – Fk poměr velikosti oblasti a plochy opsaného obdélníka ve směru k. 
Nekompaktnost – poměr kvadrátu délky hranice a velikosti 
plocha
obvod nekompaktnost
2
=
Výstřednost – poměr délek nejdelších na sebe kolmých tětiv 
Další vlastnosti objektů – obecný moment stupně p+q, centrální moment stupně p+q, těžiště 
objektu, vážený střední bod objektu. 
Porozumění obrazu – interpretace obrazu, klasifikace oblastí. Teorie
rozpoznávání, umělá inteligence (demence). Třídy objektů (etalony) jsou 
disjunktní podmnožiny se společnými rysy, do kterých lze objekty rozdělit 
podle klasifikátoru nebo kritéria. Příznaky popisu objektů x1, x2, … xn, 
etalony v1, v2 … vn 
Kritéria – kritérium minimální vzdálenosti, kritérium minimální chyby, 
kritérium nejlepší aproximace 
26. OpenGL grafické elementy. 
Funkce grafického systému: generování a reprezentace scény (elementy a atributy), práce 
s transformacemi, strukturalizace scény a manipulace s ní, řízení operací vstupu… 
Grafické systémy: GKS – Graphics Kernel System, standard od roku 1985, GKS 3D, PHIGS, 
OpenGL – programový procedurální interface ke grafickému hardware, od roku 1993, nezávislá na 
hardware a OS, pro jazyky C, C++, Java, Pascal, Fortran…, pro UNIXové i Microsoftí platformy, 
podpůrné knihovny GLU, GLX, GLUT, AUX, od 2003 verze 2.0 a 2.1, od 2008 verze 3.0, JOGL – 
Java OpenGL 
OpenGL – vykreslení geometrických primitiv, práce s rastrovým obrazem, práce s transformacemi, 
mapování textur, výpočet osvětlení, určení viditelnosti, alfa míchání barev, akumulační buffer, 
stenal buffer. 
OpenGL neumí práci s okny, určení vržených stínů, definovat objekty (reprezentace), vypočítat 
odrazy ve scéně, pracovat s objemovou reprezentací, definovat složitější geometrické objekty 
(NURBS). GLU – manipulace s obrázky, NURBS, základní objekty, GLUT – manipulace s okny, 
jednoduché menu, antialiasing, stereo pohled. Grafické elementy: složeny z vrcholů – glvertex 
Struktura příkazu: glBegin(mode-element) … glEnd 
elementy: 
GL_POINTS – body 
GL_LINES – linky 
GL_LINE_LOOP – kolo z linek 
GL_LINE_STRIP – neuzavřené kolo z linek 
GL_POLYGON – mnohoúhelník 
GL_QUADS – čtyřúhelníky 
GL_QUAD_STRIP – čtyřúhelníky v řadě za sebou 
GL_TRIANGLES – trojúhelníky 
GL_TRIANGLE_STRIP – trojúhelníky v řadě za sebou 
GL_TRIANGLE_FAN – jakoby vějíř z trojúhelníků 
atributy grafických elementů 
glPointSize – velikost bodu 
glLineWidth – tloušťka čáry 
glLineStipple – typ čáry 
glPolygonStipple – výplň polygonu 
glCullFace – ořezání 
Zadávání parametrů vrcholů elementů: glVertex (souřadnice vrcholů), glColor (barva), 
glNormal (normála), glTextCoord (souřadnice textury), glMaterial, glEdgeFlag (skutečná nebo 
umělá hrana) 
27. OpenGL poskytované funkce pro zobrazení scény. 
glBegin – začátek zadávání objektu 
glEnd – konec zadávání objektu 
glVertex – zadávání vrcholu 
glColor – změna barvy 
glTextCoord – souřadnice textury 
glMaterial - materiál 
glPointSize – velikost bodu 
glLineWidth – tloušťka čáry 
glLineStipple – typ čáry 
glPolygonStipple – výplň polygonu 
glPolygonMode (POINT, LINE, FILL) 
Např. glPolygonMode(GL_FRONT_AND_BACK, GL_LINE); 
 glLineWidth(3); 
 glBegin(GL_TRIANGLE_FAN); 
 glColor3f(1, 1, 1); 
 glVertex(0, -1, 1); 
 glColor3f(0, 1, 0); 
 glVertex(-1, -1, 0); 
glColor3f(0, 0, 1); 
 glVertex(1, -2, 0); 
 glColor3f(1, 0, 0); 
 glVertex(-1, -1, 0); 
 glEnf(); 
 … 
 glPolygonMode(GL_FRONT, GL_FILL); 
 … 
28. OpenGL transformace – funkce a jejich použití. 
glMatrixMode – výběr aktuální matice (GL_MODELVIEW, GL_PROJECTION, GL_TEXTURE) 
glLoadIdentity – načtení jednotkové matice 
glLoadMatrix, glLoadTransposeMatrix – načtení určité matice v normálním nebo transponovaném 
stavu 
glMultMatrix, glMultTransposeMatrix – přiosobení normální nebo transponované matice, původní 
matice je přepsána 
glMatrixMode(GL_MODELVIEW); 
 glLoadIdentity(); 
 glMultMatrix(A); //přinásobí matici A 
 glMultMatrix(B); //přinásobí matici B 
 glBegin(GL_POINTS); 
 glVertext3fv(v); //vykreslení vrcholu, výsledná souřadnice = ABv  glEnd(); 
glPushMatrix, glPopMatrix – ukládání a načítání matic do zásobníku 
gluProject – projekce ze scény do okna (bez vykreslení) 
gluUnProject – inverzní transformace, z okna do scény 
glGetFloatv(GL_Model_Matrix, m) – získání aktuální matice (GL_MODELVIEW_MATRIX, 
GL_PROJECTION_MATRIX) 
Práce s transformacemi 
glTranslate – posun ve směru x,y,z 
glRotate – otočení, parametry – úhel a rotace okolo x,y,z, glRotate(15f, 1f, 0f, 0f) -15 stupňů ve 
podle x 
glScale – změna měřítka na osách x,y,z 
Potřebné matice jsou přinásobeny k aktuální glModelView nebo glProjection transformaci, podle 
nastavení glMatrixMode. 
Použití zásobníku – uložení matice (pushMatrix), provedu transformaci, kterou potřebuju, vyzvednu 
matici (popMatrix), matice je v původním tvaru 
Pohyb pomocí transformací: 
bez nulování matice: public void display(GLAutoDrawable drawable){ 
 glClear(); 
glMatrixMode(GL.GL_MODELVIEW); 
 gl.glRotatef(1, 0, 0, 1); //rotace o 1 stupeň podle z-osy 
 … vykreslení scény 
 } 
s nulováním matice: public void display(GLAutoDrawable drawable){ 
 alpa += 1; 
 glClear(); 
glMatrixMode(GL.GL_MODELVIEW); 
gl.glLoadIdentity(); 
 gl.glRotatef(aplha, 0, 0, 1); //rotace o 1 stupeň podle z-osy 
 … vykreslení scény 
 } 
Projekční transformace: perspektivní promítání – glFrustum, gluPerspective
 pravoúhlé promítání - glOrtho, gluOrtho2D 
 např: glMatrixMode(GL_PROJECTION); 
 glLoadIdentity(); 
 gluPerspective(50, width/height, 1, 20); //uhel, aspekt, od, kam 
Natavení pozorovatele: gluLookAt([pozice pozorovatele], [směr pohledu], [up vektor]) 
Pohyb: dopředu – pozici pozorovatele násobím velikostí posunu (step) – podle toho ve směru, 
které osy se chci posunout, pohyb do strany sin/cos úhlů násobím velikostí posunu, pohyb nahoru 
přičítám step k y-souřadnici 
Pohyb myši – delta = aktuální-stará souřadnice 
Řízení rychlosti nezávisle na překreslování: na základě určení rychlosti (speed) a vykreslení 
jednoho snímku, v milisekundách – proto /1000. 
long millis = System.currentTimeMillis(); 
float step = speed*(millis - oldMillis)/1000f; 
oldMillis = millis; 
fts = 1000/(millis - oldMillis) //počet snímků za sekundu 
transformace do okna: glViewPort(x, y, w, h) 
glClear(); 
glMatrixMode(); 
gl.glLoadIdentity(); 
glOrtho(…); 
gluLookAt(…); 
glViewport(0, h/2, w/2, h/2); 
render(); //nárys 
glViewport(w/2, h/2, w/2, h/2); 
render(); //bokorys 
glViewport(0, 0, w/2, h/2); 
render(); //půdorys 
glViewport(w/2, 0, w/2, h/2); 
render() //pohled 
…rozdělení obrazovky na 4 okna 29. OpenGL – osvětlení, stínování, mlha. 
glShadeModel – GL_SMOOTH(interpolace barvy), GL_FLAT(konstantní stínování) 
osvětlení - zapnutí osvětlení pomocí glEnable , i více zdrojů 
barva a intenzita světla - glLight –číslo zdroje, parametr (GL_AMBIENT, GL_DIFFUSE, 
GL_SPECULAR), hodnota 
bodový zdroj světla – zdroj, směr a úhel kužele, glLightfv(zdroj, GL_SPOT_DIRECTION, směr), 
glLightf(zdroj, GL_SPOT_CUTOFF, úhel) 
umístění světelného zdroje – glLightfv(zdroj, GL_POSITION, pozice), pozice – w hodnota 1, pokud 
w=0 zdroj je umístěn v nekonečnu 
faktor poklesu intenzity světla se vzdáleností od zdroje – konstantní, lineární, kvadratická složka 
útlumu 
materiál objektu: složky světla pro jednotlivé barvy, vlastní vyzařování, GL_AMBIENT, 
GL_DIFFUSE, GL_SPECULAR, GL_AMBIENT_AND_DIFFUSE, GL_EMISSION 
GL_EMISSION – nezpůsobuje osvětlení dalších stěn, není to zdroj světla 
glMaterial – definuje vzhled povrchu bez ohledu na barvu, pouze na základě osvětlení 
glColorMaterial – používá k výpočtu osvětlení barvu definovanou pomocí glColor 
stacionární zdroj světla: světlo bude nepohyblivé vůči scéně 
glMatrixMode(GL.GL_MODELVIEW); 
 glLoadIdentity(); //způsobí nepohyblivost zdroje 
 float[] light_position = new float[]{}; //počáteční poloha světla 
zdroj umístěný v pozorovateli: 
glu.gluLookAt(posX, posY, post, …); 
float[] light_position = new float[]{posX, posY, posZ, 1}; 
gl.glLightfv(GL.GL_LIGHT0, GL.GL_POSITION, light_position, 0); 
pohyb světla, který není řízen pohybem scény: 
 glMatrixMode(GL.GL_MODELVIEW); 
 glRotatef(…); //nastavení pohybu scény 
 
glPushMatrix(); 
glBegin() … glEnd(); //vykreslení objektů scény 
 glPopMatrix(); 
glPushMatrix(); 
glLoadIdentity(); //světlo bude nepohyblivé vůči scéně 
glRotatef(…); //nastavení nezávislého pohybu světla 
float[] light_position = new float[]{}; 
gl.glLightfv(GL.GL_LIGHT0, GL.GL_POSITION, light_position, 0); 
 glPopMatrix(); 
Textury – glTexImage2D (definice MIP textury), glTexCoord (určení souřadnic textury), 
glTexParametr (způsob mapování) 
Antialiasing – glHint – GL_LINE_SMOOTH_HINT 
Mlha - lineární průběh viditelnosti, glFogi, zadává se startovací a koncová hodnota Z, mlha závisí 
na vzdálenosti od pozorovatele, aplikuje se podle Z v souřadnicích kamery, tj. v aktuálních 
transformacích nastavených v glMatrixMode, pohledové transformace lze použít na prohlížení scény 
s mlhou 
glFogi(GL.GL_FOG_MODE, GL.GL_LINEAR); 
 glFogi(GL.GL_FOG_START, fogStart); 
 glFogi(GL.GL_FOG_END, fogEnd); 
Display list – definování určité části scény, která bude vícekrát využita, rychlejší, glNewList(name, 
paramert), glEndList(name, paramert), glCallList(name), glDeleteList(name) 
Blending – míchání barev, glEnable(GL_BLEND), glDisable(GL_BLEND), glBlendFunc(src_factor, 
dst_factor), spousta možných parametrů, použití – složení obrázků, jako barevný filtr, složení 
objektů s různou průhledností, použití alfa u poloprůhledných textur (stromy) 
Buffery – ColorBuffers, DepthBuffer, StencilBuffer (šablona pro ořezáními vykreslení), 
AcumulationBuffer (akumulační paměť pro skládání RGBA obrazu)